프로젝트 기본 정보의 이해 - 패키지 네임

패키지 네임은 사용자가 아닌 안드로이드 시스템이 서로 다른 앱을 구분할 수 있도록 하기 위함

패키지명 : com.superdroid.test [지역].[기관/회사].[앱명/프로젝트명]   / 도메인과 순서를 뒤집은 형태

앱은 동일한 패키지명으로 마켓에 올릴수 없지만 다른 서비스 마켓에는 올릴 수 있다.
앱은 동일한 패키지 명으로 단말기에 두 개 이상 설치될 수 없다.

---
프로젝트 기본 정보의 세 가지 이름 정리

안드로이드 스튜디오 부터 프로젝트 네임 입력이 없어지고 App Name과 통합됨
AdroidManiFest.xml 에서 엡 네임을 변경가능

AdroidManiFest.xml	=> 앱의 특성을 저장하고 있는 중요한 설정 파일

어플리케이션 네임
앱 사용자를 위한 이름	ex) 모두의 계산기

프로젝트 네임		ex) Calculator	
개발자를 위한 이름
	
패키지 네임		ex) com.superoid.android.Calculator
안드로이드 시스템을 위한 이름

--
안드로이드 프로젝트 구성 요소

manifests/AndroidManiFest.xml
앱 전반의 걸친 설정을 담는 명세서

java 디렉토리
앱에서 사용되는 개발자가 작성한 자바 소스

res 디렉토리
앱에서 사용하는 리소스를 담고있다.
리소스는 각종 이미지와 xml파일 등


---
AndroidManifest.xml

- 안드로이드 시스템에 애플리케이션에 대한 필수적인 정보를 제공해주는 역할
- 애플리케이션 컴포넌트(액티비티, 브로드캐스트 리시버, 컨텐트 프로바이더)를 기술
- 각각 컴포넌트를 구현하는 클래스와 기능을 기술하여 안드로이드 시스템이 알게끔한다.
- 어플리케이션이 갖게 되는 권한을 설정

---
액티비티 소스 구경하기
- 화면을 구성하고 있는 소스코드

자동 생성되는 MainActivity.java

> MainActivity 클래스가 생성됨
onCreate 
- (entry Point) constructor 같은 느낌인듯

onCreate.setContentView 
- 시각적으로 보여지는 화면이 구성됨


---
화면 리소스

리소스명
R.latout.activity_main

각각의 리소스들은 R.java파일 안에 리소스 ID들을 class로 자동적으로 변환하여 관리한다.

---
왜 화면 구성을  XML 형식을 사용할까?

뷰 또는 위젯은 각각의 속성을 가진다		-	XML 각각의 요소는 속성을 가진다.
뷰 간에는 상하 관계를 가질 수 있다. 		- 	XML 요소는 간에는 상하관계를 가진다.
			
					결국 레이웃을 XML 형태로 쉽게 표현가능

- 자바 소스에 하드 코딩되지 않고 리소스 형태로 분리할 수 있다.
- 결국 레이아웃 구조를 변경할 때 자바 소스 수정을 최소화할 수 있다.

---
안드로이드 앱을 개발할 때 화면을 구성하는 과정

레이아웃 XML 작성

> 자동으로 리로스 ID 생성
	R.Java 에 리소스 자동 생성

> 액티비티에서 레이아웃 사용

> 화면상 뷰 표현

* 가장 먼저 UI 구성을 먼저 해야한다.

---
뷰에 대해서

안드로이드에서는 뷰를 위젯 Widget 이라고도 부른다.

위젯은 부품 정도로 해석될 수 있는데, 예를 들어 여러 기능을 가진 작은 부품들이 모여 하나의 자동차가 되는 것과 같은 이치다.

버튼, 텍스트 같은 뷰

이미지, 텍스트, 버튼 모두는 뷰 클래스를 상속 받는다.
즉, 눈에 보이는 모든 요소는 뷰고, 화면에 보여지는 모든 요소는 반드시 뷰를 상속받아야한다.

- 기본에 없는 모습과 기능을 가진 무언가를 만든다면 뷰를 상속받아 구현하면 되겠다.

* 뷰는 자신이 화면 어디에 그려져야 하는지에 대한 정보가 없다.
뷰를 화면에 배치하는 무언가가 반드시 필요하다. 
 > 뷰그룹

--- 
뷰그룹에 대해서

뷰그룹은 여러 자식 뷰를 담을 수 있으며, 뷰는 반드시 뷰그룹에 포함되어야지만 화면에 그려진다.

- 뷰그룹은 뷰의 배치를 담당한다.

(테이블 레이아웃, 프레임 레이아웃, 리니어 레이이웃 ...]

결국 뷰그룹도 뷰다.
* 결국 안드로이드에서의 화면은 오직 뷰만으로 구성되어 있다.

---
뷰그룹 구성 예제
- 리니어 레이나웃 : 수직 배치 or 수평배치 (d : f 생각?)

---
레이아웃 파라미터	화면 배치 정보
LayoutParams
 
뷰그룹은 자식 뷰를 어떻게 배치할까?
방법 : 자식 뷰가 배치 관련 정보를 제공
누구에게? 뷰그룹에게, 어떻게? LatoutParams를 통해. 어디에? 액티비티 레이아웃 파일(즉, Activity_main.xml)로

---
최상위 뷰그룹의 레이아웃파람의 정보

ViewGroup.LayoutParams
ViewGroup.MarginLayoutParams
>
Linrearm Frame, Relative

---
wrap-content : 뷰 스스로 적당한 크기에 맞춘다. 일반적으로 문자열의 길이에 맞춰진다.
match-parent: 부모 뷰 그룹의 크기에 맞춰진다. 즉, 부모 뷰 그룹의 너비(layout_width 경우) 또는 높이 (layout_height 경우)에 맞춰진다.

---
최상위 뷰그룹의 LayourParams 정보

레이아웃의 유연성 속성은 기억해주세요.

match_parent 값은 부모 뷰그룹에 크기를 맞춰주기 때문에 화면성 크기가 다른 단말에서도 유연하게 레이아웃을 유지할 수 있따.

---
LinearLayout과 LayourParams

리이너레이아웃 : 자식 뷰들을 수평 혹은 수직으로 배치하는 뷰그룹

1) 뷰그룹 자체의 속성, 뷰 그룹 생성할 때 설정함
2) 뷰 그룹이 자식뷰를 배치하기 위해 자식뷰에게 요구한느 속성, 자식 뷰를 생성할 때 설정함

baselineAligned 텍스트가 포함된 자식 뷰중 가장 높이가 긴 뷰를 기준으로 정렬할지 설정함
layoutWeight : 가중치

---
LinearLayout LayoutParams의 layout_weight 속성은 특정 자식뷰의 크기를 가변적으로 
조절할 수 있기 때문에 다양한 화면 크기의 단말에서 유연하게 레이아웃을 유지할 수 있따.

매우 빈번히 사용되니 꼭 기억해두자

---
RelativeLayout과 LayoutParams

RelativeLayout
[View A		]
[View B -> View C	]

1. 뷰그룹 자체의 속성	RelativeLayout	
2. 뷰그룹이 자식뷰를 배치하기 위해 자식뷰에게 요구하는 속성		LayoutParams

RelativeLayout 기본 속성 - gravity와 ignoreGravity 속성

<RelativeLayout xmlns:android="..."
	android:layout_width="match_parent"
	android:layout_height="130dp"
	android:gravity="right"		> 끌어댕김
	android:ignoreGravity="@+id/view2">	> ignoreGravity

	<Button android:layout_width="130dp"
		android:layout_height="130dp"
		android:text="View 1" />

	<Button android:id"@id/view2"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:text="View 2" />
</RelativeLayout>

ignoreGravity 속성은 특정 자식 뷰에 대한 gravity를 무력화함

RelativeLayout LayoutParams 속성 - 자식 뷰 간의 관계 배치 속성들

alignTop
alignBottom
alignRight
alignLeft
alignBaseline
above
below
toRightOf
toLeftOf

---
레이아웃의 유연성 속성은 기억해주세요.

고정|<>가변<>|고정
 
LinearLayout LayoutParams에 layout-weight 속성이 있다면
ReleativeLayout LayoutParams은 각종 조합으로 레이아웃 유연성을 지원한다.

---
FrameLayout과 LayoutParams

FrameLayout 겹쳐서 배치

FrameLayout 기본 속성 - measureAllChildren

android:visibility="visible"	android:visibility="invisible"	android:visibility="gone"

visibility 속성이 gone으로 설정된 자식뷰라 하더라도 모두 영역을 차지하도록 한다.

---
FrameLayout LayoutParams 속성 - layout gravity

layout_gravity는 자식 뷰의 중력방향을 설정한다.

---
TableLayout, TableRow와 LayoutParams 

TableLayout과 TableRow는 결국 LinearLayout 이다.

다만 표 형식으로 레이아웃을 구성하기 위한 편리한 속성들이 추가되었다.

collapseColumns 속성
숨기기

shrinkColumns 속성
열의 공간이 부족할 때 특정 열을 지정하여 공간을 줄이고 나머지 열의 공간을 확보함
줄이기

stretchColumns 속성
자식 열을 배치하고도 공간이 남을 때 특정 열이 늘어나서 공간을 채우라는 의미
채우기

layout columns 속성
자식 뷰가 배치될 열을 선택함. 
자식 뷰를 1열로 설정하면 0번째 열을 비우고 1열부터 뷰가 추가된다.

layout_span: 일반적으로 하나의 뷰는 하나의 열을 차지한다. 
이 속성을 통해 하나 이상의 열을 차지하도록 함

---
6장 대표적인 뷰

대표적인 뷰
-View는 다양한 형태가 있다.
텍스트 뷰- (EditText, Button)
이미지뷰

뷰는 일종의 위젯이라고도 한다.

뷰의 파생 클래스

버튼 - 체크박스, 스위치

최상위 뷰 속성 - id

findViewById 함수의 인자로 id를 전달하면 해당 뷰를 참조할 수 있따.
findViewById(R.id.id test_view)

TextView.textView = findViewById(R.id.id test_view)
textView.setText("Hello World!),

최상위 뷰 속성 - background 

Background : 뷰 영역 내에 배경 이미지나 특정 색상을 설정함
margin : 뷰 그룹이 자식 뷰를 배치할 때 주는 여백
padding : 자식 뷰 내의 여백

텍스트 내용과 글꼴에 관련된 속성
글자색, 배경색 다양하게 표현 가능
#RGB

텍스트 내용과 글꼴에 관련된 속성
textSize 속성
텍스트 크기를 설정하는 속성
textStyle 속성
텍스트의 두 가지 스타일을 지정하는 속성
typeface 속성
텍스트의 글자체를 설정하는 속성, 설정 값은 아래와 같이 세 가지가 존재
sans : 글자의 굵기가 같고 장식이 없는 글자체
serif : 글자의 굵기가 다르고 장식이 있는 글자체
monospace: 고정 폭의 글자체

line에 관한 속성들 --

---
EditText

editable, enabled(검은색, 회색)

enabled는 View의 속성이다.
enable이 false이면 편집 불가, 텍스트와 배경 회색, 비활성화

digit 원하는 글자만선택적으로 입력받을 수 있도록 한다.

hint, textColorHint

hint: 에디트텍스트 배경에 특정 문자열을 표시함( ^placeholder같은거네요)
글을 입력하면 배경의 hint 문자열이 자동으로 사라짐

textColorHint : hint 문자열의 색상

selectAllOoFocus
textColorHighlight

inputType
- none			일반적인 입력기 모양
- text			일반적인 입력기 모양에서 Next라는 기능키가 추가된다.
- phone(phoneNumnber 속성 대체)	전화번호 입력
- numner 			숫자패드
- numnersigned		음수양수 숫자
- time			시간 입력
- textCapCharacters 		대문자
- textPassword		텍스트가 * 로 표시됨

---
Button

onClick 속성 : 사용자가 뷰를 클릭했을 때 호출되는 콜백 함수명

문구 띄우기 : Toast.makeText(this, "버튼을 눌렀습니다", Toast.LENGTH_LONG).show();

---
ImageView

drawable 폴더 또는 mipmap에 이미지를 넣어준다.

이미지 크기에 따라 화면에 출력된 이미지뷰의 모양이 다르다, 왜 그럴까?

scaleType 이미지의 크기를 조절

[앱 개발 시 PPT, 책, 검색 해서 구현함] - 암기하긴 힘들다

---
8장 이벤트

터치 이벤트

안드로이드는 이벤트 기반의 프로그래밍 제공
이벤트란? 디바이스가 감지한 유의미한 사건들

터치 이벤트 전달과정
1. 터치 이벤트 발생
2. 터치 발생 영역에 해당하는 뷰를 최상단 루트 뷰부터 하위로 찾아나간다
3. 터치 영역에 해당하는 뷰가 버튼 뷰임을 확인함 > 레이아웃 구조상 버튼은 가장 하위에 위치
4. 버튼에 이벤트가 전달되고 버튼을 누른 효과를 나타냄

터치 이벤트 수신 함수의 역할
1. 액티비티의 dispatchTouchEvent 호출, 이 함수는 터치 영역에 있는 뷰그룹의 dispatchTouchEvent 호출
2. 뷰그룹의 dispatchTouchEvent는 터치 영역에 있는 자식뷰의 dispatchTouchEvent 호출
3. 뷰의 dispatchTouchEvent 호출은 이벤트 전달의 목적지임을 의미함. onTouchEvent를 호출함
4. 호출된 뷰의 onTouchEvent가 처리할 일이 없다면 false를 리턴, False 리턴은 이벤트를 소비하지 않음을 의미.
False를 받은 뷰의 dispatchTouchEvent 자신도 false를 뷰그룹의 반환
567 뷰 그룹의 dispatchTouchEvent가 onTouchEvent 호출, 이벤트를 소비하고 true를 반환함
89 액티비티의 dispatchTouchEvent가 ture를 반환받고, onTouchEvent를 호출하지 않음

버튼은 이벤트를 전달받아서 소비한다. 소비는 눌러진 효과를 나타낸다를 의미함
소비하기 때문에 뷰의 onTouchEvent 함수는 true를 리턴함
따라서, 뷰그룹, 액티비티의 dispatchTouchEvent 함수가 호출되지 않음

터치 이벤트 리스너
> 터치 이벤트를 받기 위해서는 늘 뷰를 상속받아 재정의해야만한다. 매우 불편하고 번거롭다.

리스너 방식은 onTouchEvent 재정의 없이 사용하기 때문에 간편하게 터치 이벤트를 전달받는다.

터치 이벤트 확장 - 익명 클래스

익명 클래스 :
 > 이름이 없는 클래스
 > 부모 클래스나 인터페이스로 새로운 클래스를 정의하여 객체를 생성하는 것이 아니라, 부모 클래스나
인터페이스의 코드를 직접 구현하여 객체를 생성함

터치 이벤트 확장 - 클릭 리스너
> 터치는 다운, 이동, 업 이벤트가 전부며, 이 세가지의 이벤트의 조합으로 다양한 동작을 처리할 수 있다.
그 중에서도 가장 많이 사용되는 이벤트 조합은 뷰 내부에서 확장된 이벤트 리스너 이다.

안드로이드는 좀 더 편리한 리스너 등록 방법을 추가로 제공한다.

클릭 리스너는 매우 많이 사용되기 때문에 좀 더 사용성이 용이한 방법 한가지를 더 제공한다.

Clickable : 클릭 리스너의 호출 여부. 기본 true
장점 
- 클릭 리스너를 등록할 뷰 객체가 필요가 없다.
> Button button - (Button)findViewById(...)
- 리스너 등록하는 코드 없다.
- 상속 받지 않아도 된다.
- 리스너를 등록하는 과정이 필요 없다.

터치 이벤트 확장 - 다중 버튼 처리
- 한 개의 클릭 핸들러를 사용하여 다중 버튼의 클릭을 처리하는 방법

터치 이벤트 확장 - 롱클릭 리스너

---
포커스와 키입력

onBackPressed 오버라이딩을 통해 뒤로가기 키의 추가 이벤트를 정의할 수 있다.

---
Dimension 리소스 - 안드로이드가 지원하는 치수 단위

px 화면이나 이미지를 구성하는 점 단위
dip 또는 dp 해상도와 관련한 밀도독립 필셀 단위
sp 글자 크기와 관련한 밀도독립 픽셀 단위
in 물리적 단위 2.54 센티미터를 1인치라고함, 일반적인 길이의 단위
pt 물리적 단위 화면의 1/72 인치를 1 포인트라고함 인쇄 관련 단위
mm 물리적 단위 1 센티미터는 10 밀리미터. 일반적인 길이의 단위
[안드로이드 단위는 매우 중요하다. 반드시 이해하고 넘어가자]

---
px 단위
pc 모니터에 나타나는 디지털 단위는 하나의 픽셀로 이루어져이싿.
- 픽셀단위는 많이 사용되지 않고 웬만하면 사용해서도 안된다.
> 픽셀 단위는 단말기 픽셀 밀도에 따라 보여지는 크기가 달라진다.
> 단말의 해상도와 밀도에 따라 원하지 않는 결과가 나올 수 이싿.

in/pt/mm 단위는 물리적 단위
뷰의 너비를 각 단위의 수치로 설정하여 화면에 출력했을 때, 자로 재면 정확히 설정한 수치와 일정하다.
* 물리적 단위도 역시 많이 사영되지 않고, 웬만하면 사용해서도 안된다.
> 물리적 단위는 정밀도를 위해 사용할 수 있지만, 픽셀보다 정밀도가 떨어진다.
> 앱을 디자인하다 보면 정밀도를 위해서 픽셀 단위로 크기를 제어하는 경우가 많다.

dip or dp (density independent pixel) 단위
> 픽셀 단위는 단말기의 픽셀 크기가 달라질 수 있기 때문에 유연하지 안혹 물리적 단위는 정밀한 설정을 할 수 없는 문제가 있다.
위의 두가지 문제를 해결하기 위한 방법 dip(or dp)
dip 는 밀도독립 픽셀 단위
dip는 화면 밀도 또는 해상도에 따라 각자의 픽셀수를 달리하는 단위이다.
화면 밀도 또는 해상도에 의존하지 않는다.

1dip = 1px 로 가정함
두배의 해상도에서 1dip = 2px로 단위 기준이 변경됨
> 해상도에 관계 없이 화면에 보이는 크기는 동일하다.

---
dpi (dot per inch)
120dpi (저밀도) ldpi
160dpi(중밀도)(기준밀도) mdpi 1픽셀이 1dip
240dpi(고밀도) hdpi 1.5픽셀이 1dip
320dpi(초고밀도) xhdpi 2픽셀이 1dip
480dpi(초초고밀도) xxhdpi 3픽셀이 1dip
---

small	2~3
normal	3~5
large	4~7
xlarge	7^

화면 인치와 밀도의 조합으로 해상도가 결정된다.

normal size에서 밀도가 hdpi 라면, 480x800 또는 480x854 해상도
normal size에서 해상도가 480x800이면 화면 밀도는 hdpi

화면 인치에 따라 small, normal, large, xlarge 화면 크기를 나뉜다.

* 레이아웃을 설계할 때 화면의 너비는 320 dip만 맞추면 대부분의 단말에 너비를 채울 수 있다.

>>> 하지만 320dip는 무너져 버렸다.
720의 해상도가 나오면서 360dip의 예외가 생겨나고 있다.

따라서 유연한 레이아웃이 매우 중요하다.

sp 단위는 dip 단위와 같다. 다만 텍스트의 글 크기를 설정하는 용도로 사용된다.

---
Drawable 리소스
화면에 그림을 그리는 목적으로 사용되는 리소스이며, res/drawable 폴더 아래에 이미지나 XML 형태의 이미지
파일로 존재한다.

getDrawble();
setBackground();

---
액티비티 실행과 인텐드

서로 다른 앱의 액티비티를 실행하는 예제
 
1. 인텐트를 하나 생성
Intent intent = new Intent(); 컴포넌트(액티비티, 서비스) 간에 통신을 위해 주고받는 메시지 또는 데이터 덩어리

2. 인텐트에 실행할 패키지의 액티비티 정보( 패키지 이름, 액티비티 이름)을 설정
ComponentName componentName = new ComponentBane ("com.superdroid.test.activity.b",
						"com.superdroid.test.activity.b.BActivity");
intent.setComponent(componentName);
3. B 액티비티를 실행
startActivity(intent);

